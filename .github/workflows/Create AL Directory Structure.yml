name: Create AL Project Folder
on:
  workflow_dispatch:
    inputs:
      project_name:
        description: "AL project name (folder will be created with this name)"
        required: true
        default: "MyALProject"
      branch_name:
        description: "Branch to commit the folder to"
        required: true
        default: "main"
      preserve_case:
        description: "Preserve original case in folder name?"
        type: boolean
        default: true

jobs:
  create-folder:
    runs-on: ubuntu-latest
    steps:
    - name: Validate project name
      run: |
        if [[ "${{ github.event.inputs.project_name }}" =~ [^a-zA-Z0-9._-] ]]; then
          echo "Invalid characters in project name."
          exit 1
        fi
        reserved=("src" "output" "node_modules" ".git" ".github" ".vscode")
        name=$(echo '${{ github.event.inputs.project_name }}' | tr '[:upper:]' '[:lower:]')
        for r in "${reserved[@]}"; do
          if [ "$name" = "$r" ]; then
            echo "Reserved folder name."
            exit 1
          fi
        done

    - name: Checkout repo
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        ref: ${{ github.event.inputs.branch_name }}
        fetch-depth: 0

    - name: Check branch exists
      run: |
        if ! git show-ref --verify --quiet refs/heads/${{ github.event.inputs.branch_name }}; then
          if ! git show-ref --verify --quiet refs/remotes/origin/${{ github.event.inputs.branch_name }}; then
            echo "Branch '${{ github.event.inputs.branch_name }}' does not exist locally or remotely."
            exit 1
          fi
        fi

    - name: Set variables
      id: vars
      run: |
        name="${{ github.event.inputs.project_name }}"
        if [ "${{ github.event.inputs.preserve_case }}" != "true" ]; then
          name=$(echo "$name" | tr '[:upper:]' '[:lower:]')
        fi
        echo "project_dir=$name" >> $GITHUB_OUTPUT
        echo "branch_name=${{ github.event.inputs.branch_name }}" >> $GITHUB_OUTPUT

    - name: Check existing folder
      id: check
      run: |
        if [ -d "${{ github.event.inputs.project_name }}" ]; then
          echo "exists=true" >> $GITHUB_OUTPUT
          echo "existing_dir=${{ github.event.inputs.project_name }}" >> $GITHUB_OUTPUT
        else
          # Case-insensitive check for different naming
          match=$(find . -maxdepth 1 -type d -iname "${{ github.event.inputs.project_name }}" -not -path "." | head -n 1)
          if [ -n "$match" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "existing_dir=$match" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi
        fi

    - name: Exit if folder exists
      if: steps.check.outputs.exists == 'true'
      run: |
        echo "Folder already exists: ${{ steps.check.outputs.existing_dir }}"
        echo "Skipping folder creation to avoid conflicts."
        exit 0

    - name: Create AL structure
      if: steps.check.outputs.exists == 'false'
      run: |
        base="${{ steps.vars.outputs.project_dir }}"
        mkdir -p "$base"
        
        # Create standard AL object directories
        declare -a dirs=(
          "Codeunit"
          "ControlAddin"
          "Dashboards"
          "Enum"
          "Interface"
          "Page"
          "PageExtension"
          "Query"
          "ReportProcessingOnly"
          "Table"
          "TableExtension"
          "XmlPort"
          "Xml"
          "Reports"
          "Reports/Layouts"
          "Reports/ReportExtension"
          "Reports/Report"
        )
        
        for d in "${dirs[@]}"; do
          mkdir -p "$base/$d"
          touch "$base/$d/.gitkeep"
        done
        
        # Create root .gitkeep
        touch "$base/.gitkeep"

    - name: Git config
      if: steps.check.outputs.exists == 'false'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

    - name: Commit and push
      if: steps.check.outputs.exists == 'false'
      run: |
        base="${{ steps.vars.outputs.project_dir }}"
        branch="${{ steps.vars.outputs.branch_name }}"
        
        git add "$base"
        
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          commit_msg="üèóÔ∏è Create AL project: ${{ github.event.inputs.project_name }}

- Folder structure with standard AL object types
- Reports directory with Layouts and Extensions  
- .gitkeep placeholders for Git tracking"
          
          git commit -m "$commit_msg"
          git push origin "$branch"
          echo "Successfully created AL project folder: $base"
        fi
