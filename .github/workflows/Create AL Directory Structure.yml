# 🛠️ GitHub Actions Workflow: Create AL Project Folder 
# Description: This workflow creates a standard folder structure for AL (Business Central) projects.

name: Create AL Directory Structure

on:
  workflow_dispatch:
    inputs:
      project_name:
        description: "Enter the AL Project name (folder will be created with this name)"
        required: true
        default: "MyALProject"
      branch_name:
        description: "Enter the branch name to commit the folder to"
        required: true
        default: "main"
      preserve_case:
        description: "Preserve original case in folder name?"
        type: boolean
        default: true

permissions:
  contents: write
  packages: read

jobs:
  create-al-project-folder:
    runs-on: ubuntu-latest

    steps:
    # ✅ Step 1: Validate project name and check for reserved names
    - name: Validate inputs
      run: |
        # Ensure the project name contains only allowed characters
        if [[ "${{ github.event.inputs.project_name }}" =~ [^a-zA-Z0-9._-] ]]; then
          echo "❌ Project name contains invalid characters. Use only letters, numbers, dots, hyphens, or underscores."
          exit 1
        fi

        # Reject usage of reserved or special directory names
        reserved_names=("src" "output" "node_modules" ".git" ".github" ".vscode")
        lower_input=$(echo '${{ github.event.inputs.project_name }}' | tr '[:upper:]' '[:lower:]')
        for reserved in "${reserved_names[@]}"; do
          if [ "$lower_input" = "$reserved" ]; then
            echo "❌ '${{ github.event.inputs.project_name }}' is a reserved folder name."
            exit 1
          fi
        done

        echo "✅ Input validation passed"

    # ✅ Step 2: Checkout repository from the selected branch
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        ref: ${{ github.event.inputs.branch_name }}
        fetch-depth: 0  # Required to validate remote branches

    # ✅ Step 3: Ensure the specified branch exists
    - name: Validate branch exists
      run: |
        if ! git ls-remote --heads origin ${{ github.event.inputs.branch_name }} | grep -q ${{ github.event.inputs.branch_name }}; then
          echo "❌ Branch '${{ github.event.inputs.branch_name }}' does not exist"
          exit 1
        fi
        echo "✅ Target branch exists"

    # ✅ Step 4: Set reusable variables based on inputs
    - name: Set variables
      id: vars
      run: |
        if [ "${{ github.event.inputs.preserve_case }}" = "true" ]; then
          project_dir="${{ github.event.inputs.project_name }}"
        else
          project_dir=$(echo '${{ github.event.inputs.project_name }}' | tr '[:upper:]' '[:lower:]')
        fi

        echo "project_dir=$project_dir" >> $GITHUB_OUTPUT
        echo "branch_name=${{ github.event.inputs.branch_name }}" >> $GITHUB_OUTPUT
        echo "📋 Project directory will be: $project_dir"

    # # ✅ Step 5: Check for existing folders (case-insensitive)
    # - name: Check existing folders (case-insensitive)
    #   id: check-folder
    #   run: |
    #     project_name="${{ github.event.inputs.project_name }}"
    #     match_dir=$(find . -maxdepth 1 -type d -iname "$project_name" -not -path "." -print -quit)

    #     if [ -n "$match_dir" ]; then
    #       echo "exists=true" >> $GITHUB_OUTPUT
    #       echo "existing_dir=$match_dir" >> $GITHUB_OUTPUT
    #       echo "⚠️ Directory '$match_dir' already exists (case-insensitive match)"
    #     else
    #       echo "exists=false" >> $GITHUB_OUTPUT
    #       echo "✅ No matching directory found. Proceeding to create '${{ steps.vars.outputs.project_dir }}'"
    #     fi

    # ✅ Step 6: Create AL object folder structure (if not already exists)
    - name: Create AL folder structure
      if: steps.check-folder.outputs.exists == 'false'
      run: |
        base_dir="${{ steps.vars.outputs.project_dir }}"

        # Declare standard AL object directories and descriptions
        declare -A al_dirs=(
          ["src"]="Main Source Code directory"
          ["src/Codeunit"]="Business logic and utility functions"
          ["src/ControlAddin"]="Custom UI controls and JavaScript addins"
          ["src/Enum"]="Enumeration types and option sets"
          ["src/Interface"]="Interface definitions for dependency injection"
          ["src/Page"]="User interface pages"
          ["src/PageExtension"]="Extensions to existing pages"
          ["src/Query"]="Data queries and analytics"
          ["src/Report Processing Only"]="Custom report definitions"
          ["src/Table"]="Data table definitions"
          ["src/TableExtension"]="Extensions to existing tables"
          ["src/XmlPort"]="XML import/export definitions"
          ["src/Permissionset"]="Permission sets and security"
          ["src/Profile"]="User profiles and role centers"
        )

        # Declare report-related subdirectories
        declare -A report_dirs=(
          ["Reports"]="Main reports directory"
          ["Reports/Layouts"]="Report layout files (RDLC, Word templates)"
          ["Reports/Report Extension"]="Extensions to existing standard reports"
          ["Reports/Report"]="Custom report definitions and logic"
        )

        echo "Creating AL project structure: $base_dir"
        mkdir -p "$base_dir"
        echo "📁 Created base directory: $base_dir"

        echo "📦 Creating AL object type directories..."
        for dir in "${!al_dirs[@]}"; do
          target="$base_dir/$dir"
          mkdir -p "$target"
          echo "✅ Created: $dir - ${al_dirs[$dir]}"
        done

        echo "📊 Creating Reports structure..."
        for dir in "${!report_dirs[@]}"; do
          target="$base_dir/$dir"
          mkdir -p "$target"
          echo "✅ Created: $dir - ${report_dirs[$dir]}"
        done

        echo "🎉 AL project structure created successfully!"

    # ✅ Step 7: Create .gitkeep with structure details
    - name: Create placeholder file
      if: steps.check-folder.outputs.exists == 'false'
      run: |
        base_dir="${{ steps.vars.outputs.project_dir }}"
        echo "# Placeholder for Git tracking" > "$base_dir/.gitkeep"
        echo "📄 Created .gitkeep file"

    # ✅ Step 8: Set Git config for committing
    - name: Configure Git
      if: steps.check-folder.outputs.exists == 'false'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action - AL Project Creator"

    # ✅ Step 9: Commit and push folder structure to target branch
    - name: Commit and push changes
      if: steps.check-folder.outputs.exists == 'false'
      run: |
        base_dir="${{ steps.vars.outputs.project_dir }}"
        branch="${{ steps.vars.outputs.branch_name }}"

        # Add .gitkeep to track empty directories
        find "$base_dir" -type d -exec touch {}/.gitkeep \;

        git add "$base_dir/"

        if git diff --staged --quiet; then
          echo "⚠️ No changes to commit"
        else
          commit_msg="🏗️ Create AL project: ${{ github.event.inputs.project_name }}

          ✨ Features:
          - AL object directory structure
          - Reports structure with Layouts and Extensions
          - README documentation
          - .gitkeep files for tracking

          📁 Project: $base_dir
          🌿 Branch: $branch
          📅 Created: $(date)"
          
          git commit -m "$commit_msg"

          if git push origin "$branch"; then
            echo "✅ Successfully pushed to $branch"
          else
            echo "❌ Failed to push changes"
            exit 1
          fi
        fi

    # ✅ Step 10: Print summary of the workflow
    - name: Summary
      if: always()
      run: |
        echo "🎯 AL Project Creation Summary"
        echo "=============================="

        if [ "${{ steps.check-folder.outputs.exists }}" == "true" ]; then
          echo "⚠️ Project already exists: ${{ steps.check-folder.outputs.existing_dir }}"
        else
          echo "✅ AL Project created successfully"
          echo "📁 Folder: ${{ steps.vars.outputs.project_dir }}"
          echo "🌿 Branch: ${{ steps.vars.outputs.branch_name }}"
          echo "📋 Structure includes:"
          echo "  - AL Object folders"
          echo "  - Reports (Layouts, Extensions)"
          echo "  - README.md"
          echo "  - .gitkeep for Git tracking"
        fi

        echo ""
        echo "🚀 Happy coding with AL!"
