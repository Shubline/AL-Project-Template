# 🛠️ GitHub Actions Workflow: Create AL Project Folder
# Description: This workflow creates a standard folder structure for AL (Business Central) projects.

name: Create AL Directory Structure

on:
  workflow_dispatch:
    inputs:
      project_name:
        description: "Enter the AL Project name (folder will be created with this name)"
        required: true
        default: "MyALProject"
      branch_name:
        description: "Enter the branch name to commit the folder to"
        required: true
        default: "main"
      preserve_case:
        description: "Preserve original case in folder name ?"
        type: boolean
        default: true

jobs:
  create-al-project-folder:
    runs-on: ubuntu-latest

    steps:
    - name: Validate inputs
      run: |
        if [[ "${{ github.event.inputs.project_name }}" =~ [^a-zA-Z0-9._-] ]]; then
          echo "❌ Project name contains invalid characters."
          exit 1
        fi

        reserved_names=("src" "output" "node_modules" ".git" ".github" ".vscode")
        lower_input=$(echo '${{ github.event.inputs.project_name }}' | tr '[:upper:]' '[:lower:]')
        for reserved in "${reserved_names[@]}"; do
          if [ "$lower_input" = "$reserved" ]; then
            echo "❌ '${{ github.event.inputs.project_name }}' is a reserved folder name."
            exit 1
          fi
        done
        echo "✅ Input validation passed"

    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        ref: ${{ github.event.inputs.branch_name }}
        fetch-depth: 0

    - name: Validate branch exists
      run: |
        if ! git ls-remote --heads origin ${{ github.event.inputs.branch_name }} | grep -q ${{ github.event.inputs.branch_name }}; then
          echo "❌ Branch '${{ github.event.inputs.branch_name }}' does not exist"
          exit 1
        fi
        echo "✅ Target branch exists"

    - name: Set variables
      id: vars
      run: |
        if [ "${{ github.event.inputs.preserve_case }}" = "true" ]; then
          project_dir="${{ github.event.inputs.project_name }}"
        else
          project_dir=$(echo '${{ github.event.inputs.project_name }}' | tr '[:upper:]' '[:lower:]')
        fi
        echo "project_dir=$project_dir" >> $GITHUB_OUTPUT
        echo "branch_name=${{ github.event.inputs.branch_name }}" >> $GITHUB_OUTPUT

    - name: Check existing folders (case-insensitive)
      id: check-folder
      run: |
        project_name="${{ github.event.inputs.project_name }}"
        match_dir=$(find . -maxdepth 1 -type d -iname "$project_name" -not -path "." -print -quit)

        if [ -n "$match_dir" ]; then
          echo "exists=true" >> $GITHUB_OUTPUT
          echo "existing_dir=$match_dir" >> $GITHUB_OUTPUT
          echo "⚠️ Directory '$match_dir' already exists"
        else
          echo "exists=false" >> $GITHUB_OUTPUT
        fi

    - name: Create or update AL folder structure
      run: |
        base_dir="${{ steps.vars.outputs.project_dir }}"

        declare -A al_dirs=(
          ["Codeunit"]="Business logic and functions"
          ["ControlAddin"]="Custom UI controls"
          ["Dashboards"]="Role Center customizations"
          ["Enum"]="Enumeration types"
          ["Interface"]="Interface definitions"
          ["Page"]="UI pages"
          ["Page Extension"]="Modifications to pages"
          ["Query"]="Data queries"
          ["Report Processing Only"]="Reports without layout"
          ["Table"]="Table definitions"
          ["Table Extension"]="Modifications to tables"
          ["XmlPort"]="XML import/export"
          ["Xml"]="XML utilities"
        )

        declare -A report_dirs=(
          ["Reports"]="Reports root"
          ["Reports/Layouts"]="RDLC/Word layouts"
          ["Reports/Report Extension"]="Report extensions"
          ["Reports/Report"]="Custom report definitions"
        )

        echo "📁 Creating base directory: $base_dir"
        mkdir -p "$base_dir"

        echo "📦 Ensuring AL object directories exist..."
        for dir in "${!al_dirs[@]}"; do
          target="$base_dir/$dir"
          if [ ! -d "$target" ]; then
            mkdir -p "$target"
            echo "✅ Created: $target"
          else
            echo "ℹ️ Exists: $target"
          fi
        done

        echo "📊 Ensuring report substructure..."
        for dir in "${!report_dirs[@]}"; do
          target="$base_dir/$dir"
          if [ ! -d "$target" ]; then
            mkdir -p "$target"
            echo "✅ Created: $target"
          else
            echo "ℹ️ Exists: $target"
          fi
        done

    - name: Create README.md if not exists
      run: |
        base_dir="${{ steps.vars.outputs.project_dir }}"
        readme="$base_dir/README.md"

        if [ ! -f "$readme" ]; then
          cat > "$readme" << EOF
# ${{ github.event.inputs.project_name }}

    - name: Configure Git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action - AL Project Creator"

    - name: Commit and push changes
      run: |
        base_dir="${{ steps.vars.outputs.project_dir }}"
        branch="${{ steps.vars.outputs.branch_name }}"

        find "$base_dir" -type d -exec touch {}/.gitkeep \;

        git add "$base_dir/"

        if git diff --staged --quiet; then
          echo "⚠️ No changes to commit"
        else
          git commit -m "🏗️ Update AL project: ${{ github.event.inputs.project_name }} - $(date)"
          git push origin "$branch"
          echo "✅ Changes pushed"
        fi

    - name: Summary
      if: always()
      run: |
        echo "🎯 Workflow Summary"
        echo "==================="
        echo "📁 Folder: ${{ steps.vars.outputs.project_dir }}"
        echo "🌿 Branch: ${{ steps.vars.outputs.branch_name }}"
        echo "📦 Structure: AL objects + Reports + README.md"
        echo "🗂️ .gitkeep used for empty folders"
        echo "✅ Completed"
